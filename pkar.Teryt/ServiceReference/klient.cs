//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;


//[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
public partial class TERYT : System.ServiceModel.ClientBase<ITerytWs1>, ITerytWs1
{


    #region ctory


    public TerytCache Cache;


    public TERYT(string user, string pswd) :
            base(TERYT.GetDefaultBinding(), TERYT.GetDefaultEndpointAddress())
    {
        this.ClientCredentials.UserName.UserName = user;
        this.ClientCredentials.UserName.Password = pswd;

        this.Endpoint.Name = EndpointConfiguration.custom.ToString();
        //ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        Cache = new TerytCache(this);
    }



    #endregion


    /// <summary>
    /// TRUE jeśli wszystko w porządku - w tym login, adres, itp.
    /// </summary>
    /// <returns></returns>
    public System.Threading.Tasks.Task<bool> CzyZalogowanyAsync()
    {
        return base.Channel.CzyZalogowanyAsync();
    }



    #region "urzędy gmin"
    /// <summary>
    /// Tylko dla urzędów gmin
    /// </summary>
    public System.Threading.Tasks.Task<bool> ZweryfikowanyAsync()
    {
        return base.Channel.ZweryfikowanyAsync();
    }

    /// <summary>
    /// Tylko dla urzędów gmin
    /// </summary>
    public System.Threading.Tasks.Task<OdpowiedzTeryt> AktualizujUliceEMUiAAsync(PlacUlica placUlica)
    {
        return base.Channel.AktualizujUliceEMUiAAsync(placUlica);
    }

    /// <summary>
    /// Tylko dla urzędów gmin
    /// </summary>
    public System.Threading.Tasks.Task<OdpowiedzTeryt> AktualizujPunktAdresowyEMUiAAsync(PunktAdresowy punktAdresowy)
    {
        return base.Channel.AktualizujPunktAdresowyEMUiAAsync(punktAdresowy);
    }


    #endregion


    #region TERC

    /// <summary>
    /// Pobierz datę początkową bieżącego stanu katalogu TERC.
    /// </summary>
    public System.Threading.Tasks.Task<System.DateTime> PobierzDateAktualnegoKatTercAsync()
    {
        return base.Channel.PobierzDateAktualnegoKatTercAsync();
    }



    /// <summary>
    /// Pobierz listę województw aktualną na NOW [TERC]
    /// </summary>
    /// <param name="DataStanu"></param>
    public System.Threading.Tasks.Task<JednostkaTerytorialna[]> PobierzListeWojewodztwAsync()
    {
        return base.Channel.PobierzListeWojewodztwAsync(DateTime.Now);
    }

    /// <summary>
    /// Pobierz listę województw aktualną na podany dzień (minimalnie 1/1/1999) [TERC]
    /// </summary>
    /// <param name="DataStanu">minimalnie 1/1/1999</param>
    /// <exception cref="System.ArgumentNullException">gdy data jest NULL</exception>
    /// <exception cref="System.ArgumentException">gdy data sprzed 1999</exception>
    public System.Threading.Tasks.Task<JednostkaTerytorialna[]> PobierzListeWojewodztwAsync(System.DateTime DataStanu)
    {
        if (DataStanu == null) throw new System.ArgumentNullException("Data stanu musi być podana");
        if (DataStanu.Year < 1999) throw new System.ArgumentException("Rok musi być minimum 1999");

        return base.Channel.PobierzListeWojewodztwAsync(DataStanu);
    }

    /// <summary>
    /// Pobierz listę powiatów w danym województwie na datę (minimalnie 1/1/1999)  [TERC]
    /// </summary>
    /// <param name="Woj">pole WOJ z województwa (np. "12" dla małopolski)</param>
    /// <param name="DataStanu">minimalnie 1/1/1999</param>
    /// <returns></returns>
    /// <exception cref="System.ArgumentNullException">gdy data jest NULL</exception>
    /// <exception cref="System.ArgumentException">gdy data sprzed 1999</exception>
    public System.Threading.Tasks.Task<JednostkaTerytorialna[]> PobierzListePowiatowAsync(string Woj, System.DateTime DataStanu)
    {
        if (DataStanu == null) throw new System.ArgumentNullException("Data stanu musi być podana");
        if (DataStanu.Year < 1999) throw new System.ArgumentException("Rok musi być minimum 1999");

        return base.Channel.PobierzListePowiatowAsync(Woj, DataStanu);
    }


    /// <summary>
    /// Pobierz listę powiatów w danym województwie na Date.Now [TERC]
    /// </summary>
    /// <param name="Woj">pole WOJ z województwa (np. "12" dla małopolski)</param>
    public System.Threading.Tasks.Task<JednostkaTerytorialna[]> PobierzListePowiatowAsync(string Woj)
    {
        return base.Channel.PobierzListePowiatowAsync(Woj, DateTime.Now);
    }


    /// <summary>
    /// Pobierz listę gmin w danym województwie i powiecie na datę (minimalnie 1/1/1999) [TERC]
    /// </summary>
    /// <param name="Woj">pole WOJ z województwa (np. "12" dla małopolski)</param>
    /// <param name="Pow">pole POW z powiatu (np. "61" dla Kraków)</param>
    /// <param name="DataStanu">minimalnie 1/1/1999</param>
    /// <exception cref="System.ArgumentNullException">gdy data jest NULL</exception>
    /// <exception cref="System.ArgumentException">gdy data sprzed 1999</exception>
    public System.Threading.Tasks.Task<JednostkaTerytorialna[]> PobierzListeGminAsync(string Woj, string Pow, System.DateTime DataStanu)
    {
        if (DataStanu == null) throw new System.ArgumentNullException("Data stanu musi być podana");
        if (DataStanu.Year < 1999) throw new System.ArgumentException("Rok musi być minimum 1999");

        return base.Channel.PobierzListeGminAsync(Woj, Pow, DataStanu);
    }

    /// <summary>
    /// Pobierz listę gmin w danym województwie i powiecie na Date.Now [TERC_]
    /// </summary>
    /// <param name="Woj">pole WOJ z województwa (np. "12" dla małopolski)</param>
    /// <param name="Pow">pole POW z powiatu (np. "61" dla Kraków)</param>
    public System.Threading.Tasks.Task<JednostkaTerytorialna[]> PobierzListeGminAsync(string Woj, string Pow)
    {
        return base.Channel.PobierzListeGminAsync(Woj, Pow, DateTime.Now);
    }


    /// <summary>
    /// Pobierz listę gmin i powiatów w województwie na podaną datę (minimalnie 1/1/1999)
    /// </summary>
    /// <param name="Woj">pole WOJ z województwa (np. "12" dla małopolski)</param>
    /// <param name="DataStanu">minimalnie 1/1/1999</param>
    /// <exception cref="System.ArgumentNullException">gdy data jest NULL</exception>
    /// <exception cref="System.ArgumentException">gdy data sprzed 1999</exception>
    public System.Threading.Tasks.Task<JednostkaTerytorialna[]> PobierzGminyiPowDlaWojAsync(string Woj, System.DateTime DataStanu)
    {
        if (DataStanu == null) throw new System.ArgumentNullException("Data stanu musi być podana");
        if (DataStanu.Year < 1999) throw new System.ArgumentException("Rok musi być minimum 1999");

        return base.Channel.PobierzGminyiPowDlaWojAsync(Woj, DataStanu);
    }


    /// <summary>
    /// Pobierz listę gmin i powiatów w województwie na Date.Now
    /// </summary>
    /// <param name="Woj">pole WOJ z województwa (np. "12" dla małopolski)</param>
    public System.Threading.Tasks.Task<JednostkaTerytorialna[]> PobierzGminyiPowDlaWojAsync(string Woj)
    {
        return base.Channel.PobierzGminyiPowDlaWojAsync(Woj, DateTime.Now);
    }


    public System.Threading.Tasks.Task<PlikKatalog> PobierzKatalogTERCAdrAsync(System.DateTime DataStanu)
    {
        return base.Channel.PobierzKatalogTERCAdrAsync(DataStanu);
    }

    public System.Threading.Tasks.Task<PlikKatalog> PobierzKatalogTERCAdrAsync()
    {
        return base.Channel.PobierzKatalogTERCAdrAsync(DateTime.Now);
    }


    public System.Threading.Tasks.Task<PlikKatalog> PobierzKatalogTERCAsync(System.DateTime DataStanu)
    {
        return base.Channel.PobierzKatalogTERCAsync(DataStanu);
    }

    public System.Threading.Tasks.Task<PlikKatalog> PobierzKatalogTERCAsync()
    {
        return base.Channel.PobierzKatalogTERCAsync(DateTime.Now);
    }


    public System.Threading.Tasks.Task<PlikZmiany> PobierzZmianyTercUrzedowyAsync(System.DateTime stanod, System.DateTime stando)
    {
        return base.Channel.PobierzZmianyTercUrzedowyAsync(stanod, stando);
    }

    public System.Threading.Tasks.Task<PlikZmiany> PobierzZmianyTercAdresowyAsync(System.DateTime stanod, System.DateTime stando)
    {
        return base.Channel.PobierzZmianyTercAdresowyAsync(stanod, stando);
    }

    /// <summary>
    /// kilka prostych statystyk - łatwiej użyć TerytWLiczbachTypAsync
    /// </summary>
    /// <param name="wybierz"></param>
    /// <returns></returns>
    public System.Threading.Tasks.Task<Statystki> TerytWLiczbachAsync(int wybierz)
    {
        return base.Channel.TerytWLiczbachAsync(wybierz);
    }

    /// <summary>
    /// kilka prostych statystyk
    /// </summary>
    /// <param name="wybierz"></param>
    /// <returns></returns>
    public System.Threading.Tasks.Task<Statystki> TerytWLiczbachTypAsync(TerytWliczbachTyp wybierz)
    {
        return base.Channel.TerytWLiczbachAsync((int)wybierz);
    }


    /// <summary>
    /// Zwraca krótkie zestawienie: ile elementów słownika, najkrótsze i najdłuższe nazwy, itp.
    /// </summary>
    public System.Threading.Tasks.Task<string> CiekawostkiTERCAsync()
    {
        return base.Channel.CiekawostkiTERCAsync();
    }


    /// <summary>
    /// zwraca listę stringów d/m/y - kolejne zmiany katalogu, a(0) to stan najstarszy
    /// </summary>
    public System.Threading.Tasks.Task<string[]> PobierzListeStanowTercAsync()
    {
        return base.Channel.PobierzListeStanowTercAsync();
    }

    /// <summary>
    /// zwraca listę dat - kolejne zmiany katalogu, a(0) to stan najstarszy
    /// </summary>
    public async System.Threading.Tasks.Task<DateTime[]> PobierzListeDatStanowTercAsync()
    {
        var ret = await base.Channel.PobierzListeStanowTercAsync();
        return KonwersjaStringArrToDateArr(ret);
    }


    private DateTime[] KonwersjaStringArrToDateArr(string[] daty)
    {
        DateTime[] dateTimes = new DateTime[daty.Length];

        for (int iLp = 0; iLp < daty.Length; iLp++)
        {
            DateTime.TryParseExact(daty[iLp], "M/d/yyyy", null, System.Globalization.DateTimeStyles.None, out dateTimes[iLp]);
        }

        return dateTimes;
    }


    /// <summary>
    /// statystyka ile jest jednostek jakiego typu, per województwo na podaną datę (d/M/yyyy)
    /// </summary>
    public System.Threading.Tasks.Task<RMiejscowosciWiejskie[]> RaportLiczbaMiejscowosciWiejskichAsync(string dataStanu)
    {
        return base.Channel.RaportLiczbaMiejscowosciWiejskichAsync(dataStanu);
    }

    /// <summary>
    /// statystyka ile jest jednostek jakiego typu, per województwo na dziś
    /// </summary>
    public System.Threading.Tasks.Task<RMiejscowosciWiejskie[]> RaportLiczbaMiejscowosciWiejskichAsync()
    {
        return base.Channel.RaportLiczbaMiejscowosciWiejskichAsync(DateTime.Now.ToString("d/M/yyyy"));
    }


    /// <summary>
    /// statystyka ile jest jednostek jakiego typu, per województwo na podaną datę (d/M/yyyy)
    /// </summary>
    /// <param name="dataStanu"></param>
    /// <returns></returns>
    public System.Threading.Tasks.Task<RLiczbaJednostkiTerc[]> RaportLiczbaJednostekTercAsync(string dataStanu)
    {
        return base.Channel.RaportLiczbaJednostekTercAsync(dataStanu);
    }

    /// <summary>
    /// statystyka ile jest jednostek jakiego typu, per województwo na dziś
    /// </summary>
    public System.Threading.Tasks.Task<RLiczbaJednostkiTerc[]> RaportLiczbaJednostekTercAsync()
    {
        return base.Channel.RaportLiczbaJednostekTercAsync(DateTime.Now.ToString("d/M/yyyy"));
    }


    /// <summary>
    /// lista jednostek podziału terytorialnego dodanych pomiędzy wskazanymi datami (d/M/yyyy)
    /// </summary>
    public System.Threading.Tasks.Task<RJednostkiTerc[]> RaportPorownanieTercNoweJednostkiAsync(string dataOd, string dataDo)
    {
        return base.Channel.RaportPorownanieTercNoweJednostkiAsync(dataOd, dataDo);
    }

    /// <summary>
    /// lista jednostek podziału terytorialnego dodanych od wskazanej daty
    /// </summary>
    public System.Threading.Tasks.Task<RJednostkiTerc[]> RaportPorownanieTercNoweJednostkiAsync(string dataOd)
    {
        return base.Channel.RaportPorownanieTercNoweJednostkiAsync(dataOd, DateTime.Now.ToString("d/M/yyyy"));
    }


    /// <summary>
    /// lista jednostek podziału terytorialnego usuniętych pomiędzy wskazanymi datami (d/M/yyyy)
    /// </summary>
    public System.Threading.Tasks.Task<RJednostkiTerc[]> RaportPorownanieTercUsunieteJednostkiAsync(string dataOd, string dataDo)
    {
        return base.Channel.RaportPorownanieTercUsunieteJednostkiAsync(dataOd, dataDo);
    }

    /// <summary>
    /// lista jednostek podziału terytorialnego usuniętych  od wskazanej daty
    /// </summary>
    public System.Threading.Tasks.Task<RJednostkiTerc[]> RaportPorownanieTercUsunieteJednostkiAsync(string dataOd)
    {
        return base.Channel.RaportPorownanieTercUsunieteJednostkiAsync(dataOd, DateTime.Now.ToString("d/M/yyyy"));
    }


    /// <summary>
    /// lista zmian w TERYT pomiędzy wskazanymi datami (d/M/yyyy)
    /// </summary>
    public System.Threading.Tasks.Task<RZmianyTerc[]> RaportPorownanieTercZmienioneNazwyAsync(string dataOd, string dataDo)
    {
        return base.Channel.RaportPorownanieTercZmienioneNazwyAsync(dataOd, dataDo);
    }

    /// <summary>
    /// lista zmian w TERYT od wskazanej daty (d/M/yyyy)
    /// </summary>
    public System.Threading.Tasks.Task<RZmianyTerc[]> RaportPorownanieTercZmienioneNazwyAsync(string dataOd)
    {
        return base.Channel.RaportPorownanieTercZmienioneNazwyAsync(dataOd, DateTime.Now.ToString("d/M/yyyy"));
    }

    /// <summary>
    /// lista zmian w TERYT pomiędzy wskazanymi datami (d/M/yyyy)
    /// </summary>
    public System.Threading.Tasks.Task<RZmianyTerc[]> RaportPorownanieTercZmienioneSymboleAsync(string dataOd, string dataDo)
    {
        return base.Channel.RaportPorownanieTercZmienioneSymboleAsync(dataOd, dataDo);
    }

    /// <summary>
    /// lista zmian w TERYT od wskazanej daty (d/M/yyyy)
    /// </summary>
    public System.Threading.Tasks.Task<RZmianyTerc[]> RaportPorownanieTercZmienioneSymboleAsync(string dataOd)
    {
        return base.Channel.RaportPorownanieTercZmienioneSymboleAsync(dataOd, DateTime.Now.ToString("d/M/yyyy"));
    }


    /// <summary>
    /// lista zmian w TERYT pomiędzy wskazanymi datami (d/M/yyyy)
    /// </summary>
    public System.Threading.Tasks.Task<RZmianyTerc[]> RaportPorownanieTercZmienioneSymboleINazwyAsync(string dataOd, string dataDo)
    {
        return base.Channel.RaportPorownanieTercZmienioneSymboleINazwyAsync(dataOd, dataDo);
    }

    /// <summary>
    /// lista zmian w TERYT od wskazanej daty (d/M/yyyy)
    /// </summary>
    public System.Threading.Tasks.Task<RZmianyTerc[]> RaportPorownanieTercZmienioneSymboleINazwyAsync(string dataOd)
    {
        return base.Channel.RaportPorownanieTercZmienioneSymboleINazwyAsync(dataOd, DateTime.Now.ToString("M/d/yyyy"));
    }


    #endregion


    #region NTS


    /// <summary>
    /// Pobierz datę początkową bieżącego stanu katalogu NTS.
    /// </summary>
    public System.Threading.Tasks.Task<System.DateTime> PobierzDateAktualnegoKatNTSAsync()
    {
        return base.Channel.PobierzDateAktualnegoKatNTSAsync();
    }


    /// <summary>
    /// Wykaz regionów do celów statystycznych na podaną datę
    /// </summary>
    /// <param name="DataStanu">minimalnie 1/8/2000, ale od 2005 jest 6, a wcześniej było 1 (=Polska)</param>
    /// <exception cref="System.ArgumentNullException">gdy data jest NULL</exception>
    /// <exception cref="System.ArgumentException">gdy data sprzed 1/8/2000</exception>
    public System.Threading.Tasks.Task<JednostkaNomenklaturyNTS[]> PobierzListeRegionowAsync(System.DateTime DataStanu)
    {
        if (DataStanu == null) throw new System.ArgumentNullException("Data stanu musi być podana");
        if (DataStanu.Year < 2000 || (DataStanu.Year == 2000 && DataStanu.Month < 8)) throw new System.ArgumentException("Rok musi być minimum 1/1/2000");

        return base.Channel.PobierzListeRegionowAsync(DataStanu);
    }


    /// <summary>
    /// Wykaz regionów do celów statystycznych na Date.Now 
    /// </summary>
    public System.Threading.Tasks.Task<JednostkaNomenklaturyNTS[]> PobierzListeRegionowAsync()
    {
        return base.Channel.PobierzListeRegionowAsync(DateTime.Now);
    }

    /// <summary>
    /// Wykaz województw w regionie do celów statystycznych na podaną datę
    /// </summary>
    /// <param name="DataStanu">minimalnie 1/8/2000, ale od 2005 jest 6, a wcześniej było 1 (=Polska)</param>
    /// <param name="Reg">symbol regionu z PobierzListeRegionowAsync.Reg, np. 2 dla południowego</param>
    /// <exception cref="System.ArgumentNullException">gdy data jest NULL</exception>
    /// <exception cref="System.ArgumentException">gdy data sprzed 1/8/2000</exception>
    public System.Threading.Tasks.Task<JednostkaNomenklaturyNTS[]> PobierzListeWojewodztwWRegionieAsync(string Reg, System.DateTime DataStanu)
    {
        if (DataStanu == null) throw new System.ArgumentNullException("Data stanu musi być podana");
        if (DataStanu.Year < 2000 || (DataStanu.Year == 2000 && DataStanu.Month < 8)) throw new System.ArgumentException("Rok musi być minimum 1/1/2000");

        return base.Channel.PobierzListeWojewodztwWRegionieAsync(Reg, DataStanu);
    }

    /// <summary>
    /// Wykaz województw w regionie do celów statystycznych na Date.Now
    /// <param name="DataStanu">minimalnie 1/8/2000, ale od 2005 jest 6, a wcześniej było 1 (=Polska)</param>
    /// <param name="Reg">symbol regionu z PobierzListeRegionowAsync.Reg, np. 2 dla południowego</param>
    public System.Threading.Tasks.Task<JednostkaNomenklaturyNTS[]> PobierzListeWojewodztwWRegionieAsync(string Reg)
    {
        return base.Channel.PobierzListeWojewodztwWRegionieAsync(Reg, DateTime.Now);
    }



    /// <summary>
    /// Wykaz podregionów w województwie do celów statystycznych na podaną datę
    /// </summary>
    /// <param name="DataStanu">minimalnie 1/8/2000, ale od 2005 jest 6, a wcześniej było 1 (=Polska)</param>
    /// <param name="Woj">symbol województwa PobierzListeWojewodztwWRegionieAsync.Woj, np. 12 dla małopolski</param>
    /// <exception cref="System.ArgumentNullException">gdy data jest NULL</exception>
    /// <exception cref="System.ArgumentException">gdy data sprzed 1/8/2000</exception>
    public System.Threading.Tasks.Task<JednostkaNomenklaturyNTS[]> PobierzListePodregionowAsync(string Woj, System.DateTime DataStanu)
    {
        if (DataStanu == null) throw new System.ArgumentNullException("Data stanu musi być podana");
        if (DataStanu.Year < 2000 || (DataStanu.Year == 2000 && DataStanu.Month < 8)) throw new System.ArgumentException("Rok musi być minimum 1/1/2000");

        return base.Channel.PobierzListePodregionowAsync(Woj, DataStanu);
    }

    /// <summary>
    /// Wykaz podregionów w województwie do celów statystycznych na Date.Now
    /// </summary>
    /// <param name="Woj">symbol województwa PobierzListeWojewodztwWRegionieAsync.Woj, np. 12 dla małopolski</param>
    public System.Threading.Tasks.Task<JednostkaNomenklaturyNTS[]> PobierzListePodregionowAsync(string Woj)
    {
        return base.Channel.PobierzListePodregionowAsync(Woj, DateTime.Now);
    }


    /// <summary>
    /// Wykaz powiatów w podregionie do celów statystycznych na podaną datę
    /// </summary>
    /// <param name="DataStanu">minimalnie 1/8/2000, ale od 2005 jest 6, a wcześniej było 1 (=Polska)</param>
    /// <param name="Podreg">symbol podregionu, PobierzListePodregionowAsync.PODREG, np. 21 dla Krakowa</param>
    /// <exception cref="System.ArgumentNullException">gdy data jest NULL</exception>
    /// <exception cref="System.ArgumentException">gdy data sprzed 1/8/2000</exception>
    public System.Threading.Tasks.Task<JednostkaNomenklaturyNTS[]> PobierzListePowiatowWPodregionieAsync(string Podreg, System.DateTime DataStanu)
    {
        if (DataStanu == null) throw new System.ArgumentNullException("Data stanu musi być podana");
        if (DataStanu.Year < 2000 || (DataStanu.Year == 2000 && DataStanu.Month < 8)) throw new System.ArgumentException("Rok musi być minimum 1/1/2000");

        return base.Channel.PobierzListePowiatowWPodregionieAsync(Podreg, DataStanu);
    }

    /// <summary>
    /// Wykaz powiatów w podregionie do celów statystycznych na Date.Now
    /// </summary>
    /// <param name="Podreg">symbol podregionu, PobierzListePodregionowAsync.PODREG, np. 21 dla Krakowa</param>
    public System.Threading.Tasks.Task<JednostkaNomenklaturyNTS[]> PobierzListePowiatowWPodregionieAsync(string Podreg)
    {
        return base.Channel.PobierzListePowiatowWPodregionieAsync(Podreg, DateTime.Now);
    }


    /// <summary>
    /// Wykaz gmin w powiecie i podregionie do celów statystycznych na podaną datę
    /// </summary>
    /// <param name="DataStanu">minimalnie 1/8/2000, ale od 2005 jest 6, a wcześniej było 1 (=Polska)</param>
    /// <param name="Podreg">symbol podregionu, PobierzListePodregionowAsync.PODREG, np. 21 dla Krakowa</param>
    /// <param name="Pow">symbol powiatu, PobierzListePowiatowWPodregionieAsync.POW, np. 61 dla Krakowa</param>
    /// <exception cref="System.ArgumentNullException">gdy data jest NULL</exception>
    /// <exception cref="System.ArgumentException">gdy data sprzed 1/8/2000</exception>

    public System.Threading.Tasks.Task<JednostkaNomenklaturyNTS[]> PobierzListeGminPowiecieAsync(string Pow, string Podreg, System.DateTime DataStanu)
    {
        return base.Channel.PobierzListeGminPowiecieAsync(Pow, Podreg, DataStanu);
    }


    /// <summary>
    /// Wykaz gmin w powiecie i podregionie do celów statystycznych na Date.Now
    /// </summary>
    /// <param name="Podreg">symbol podregionu, PobierzListePodregionowAsync.PODREG, np. 21 dla Krakowa</param>
    /// <param name="Pow">symbol powiatu, PobierzListePowiatowWPodregionieAsync.POW, np. 61 dla Krakowa</param>

    public System.Threading.Tasks.Task<JednostkaNomenklaturyNTS[]> PobierzListeGminPowiecieAsync(string Pow, string Podreg)
    {
        return base.Channel.PobierzListeGminPowiecieAsync(Pow, Podreg, DateTime.Now);
    }

    public System.Threading.Tasks.Task<PlikKatalog> PobierzKatalogNTSAsync(System.DateTime DataStanu)
    {
        return base.Channel.PobierzKatalogNTSAsync(DataStanu);
    }

    public System.Threading.Tasks.Task<PlikZmiany> PobierzZmianyNTSAsync(System.DateTime stanod, System.DateTime stando)
    {
        return base.Channel.PobierzZmianyNTSAsync(stanod, stando);
    }



    #endregion


    #region SIMC

    /// <summary>
    /// Pobierz datę początkową bieżącego stanu katalogu SIMC
    /// </summary>
    public System.Threading.Tasks.Task<System.DateTime> PobierzDateAktualnegoKatSimcAsync()
    {
        return base.Channel.PobierzDateAktualnegoKatSimcAsync();
    }

    /// <summary>
    /// Zwraca listę miejscowości (i podobnych), wg parametrów (prefiksów) na podaną datę
    /// </summary>
    /// <param name="Wojewodztwo">początek nazwy województwa ('mał' wystarcza)</param>
    /// <param name="Powiat">początek nazwy powiatu</param>
    /// <param name="Gmina">początek nazwy gminy</param>
    /// <param name="DataStanu">minimalnie 1/1/1999, część adresowa zaś od 1/10/2006</param>
    /// <exception cref="System.ArgumentNullException">gdy data jest NULL</exception>
    /// <exception cref="System.ArgumentException">gdy data sprzed 1/1/1999</exception>
    public System.Threading.Tasks.Task<Miejscowosc[]> PobierzListeMiejscowosciWGminieAsync(string Wojewodztwo, string Powiat, string Gmina, System.DateTime DataStanu)
    {
        if (DataStanu == null) throw new System.ArgumentNullException("Data stanu musi być podana");
        if (DataStanu.Year < 1999) throw new System.ArgumentException("Rok musi być minimum 1999");

        return base.Channel.PobierzListeMiejscowosciWGminieAsync(Wojewodztwo, Powiat, Gmina, DataStanu);
    }

    /// <summary>
    /// Zwraca listę miejscowości (i podobnych), wg parametrów (prefiksów) na dziś
    /// </summary>
    /// <param name="Wojewodztwo">początek nazwy województwa ('mał' wystarcza)</param>
    /// <param name="Powiat">początek nazwy powiatu</param>
    /// <param name="Gmina">początek nazwy gminy</param>
    public System.Threading.Tasks.Task<Miejscowosc[]> PobierzListeMiejscowosciWGminieAsync(string Wojewodztwo, string Powiat, string Gmina)
    {
        return base.Channel.PobierzListeMiejscowosciWGminieAsync(Wojewodztwo, Powiat, Gmina, DateTime.Now);
    }


    /// <summary>
    /// Zwraca listę miejscowości (i podobnych), wg parametrów (id), na podaną datę
    /// </summary>
    /// <param name="symbolWoj">Dwuznakowy symbol województwa</param>
    /// <param name="symbolPow">Dwuznakowy symbol powiatu</param>
    /// <param name="symbolGmi">Dwuznakowy symbol gminy</param>
    /// <param name="symbolRodz">Symbol rodzaju (RodzajJednostki, "0" oznacza wszystko)</param>
    /// <param name="DataStanu">minimalnie 1/1/1999, część adresowa zaś od 1/10/2006</param>
    /// <exception cref="System.ArgumentNullException">gdy data jest NULL</exception>
    /// <exception cref="System.ArgumentException">gdy data sprzed 1/1/1999</exception>
    public System.Threading.Tasks.Task<Miejscowosc[]> PobierzListeMiejscowosciWRodzajuGminyAsync(string symbolWoj, string symbolPow, string symbolGmi, string symbolRodz, System.DateTime DataStanu)
    {
        if (DataStanu == null) throw new System.ArgumentNullException("Data stanu musi być podana");
        if (DataStanu.Year < 1999) throw new System.ArgumentException("Rok musi być minimum 1999");

        return base.Channel.PobierzListeMiejscowosciWRodzajuGminyAsync(symbolWoj, symbolPow, symbolGmi, symbolRodz, DataStanu);
    }

    /// <summary>
    /// Zwraca listę miejscowości (i podobnych), wg parametrów (id), na Date.Now
    /// </summary>
    /// <param name="symbolWoj">Dwuznakowy symbol województwa</param>
    /// <param name="symbolPow">Dwuznakowy symbol powiatu</param>
    /// <param name="symbolGmi">Dwuznakowy symbol gminy</param>
    /// <param name="symbolRodz">Symbol rodzaju (RodzajJednostki, "0" oznacza wszystko)</param>
    public System.Threading.Tasks.Task<Miejscowosc[]> PobierzListeMiejscowosciWRodzajuGminyAsync(string symbolWoj, string symbolPow, string symbolGmi, string symbolRodz)
    {
        return base.Channel.PobierzListeMiejscowosciWRodzajuGminyAsync(symbolWoj, symbolPow, symbolGmi, symbolRodz, DateTime.Now);
    }


    /// <summary>
    /// Zwraca listę miejscowości (i podobnych) z poszerzonymi opisami, wg parametrów (id), na podaną datę
    /// </summary>
    /// <param name="symbolWoj">Dwuznakowy symbol województwa</param>
    /// <param name="symbolPow">Dwuznakowy symbol powiatu</param>
    /// <param name="symbolGmi">Dwuznakowy symbol gminy</param>
    /// <param name="symbolRodz">Symbol rodzaju (RodzajJednostki, "0" oznacza wszystko)</param>
    /// <param name="DataStanu">minimalnie 1/1/1999, część adresowa zaś od 1/10/2006</param>
    /// <exception cref="System.ArgumentNullException">gdy data jest NULL</exception>
    /// <exception cref="System.ArgumentException">gdy data sprzed 1/1/1999</exception>
    public System.Threading.Tasks.Task<MiejscowoscPelna[]> PobierzListeMiejscowosciWGminieZSymbolemAsync(string Woj, string Pow, string Gmi, string Rodz, System.DateTime DataStanu)
    {
        if (DataStanu == null) throw new System.ArgumentNullException("Data stanu musi być podana");
        if (DataStanu.Year < 1999) throw new System.ArgumentException("Rok musi być minimum 1999");

        return base.Channel.PobierzListeMiejscowosciWGminieZSymbolemAsync(Woj, Pow, Gmi, Rodz, DataStanu);
    }


    /// <summary>
    /// Zwraca listę miejscowości (i podobnych) z poszerzonymi opisami, wg parametrów (id), na Date.Now
    /// </summary>
    /// <param name="symbolWoj">Dwuznakowy symbol województwa</param>
    /// <param name="symbolPow">Dwuznakowy symbol powiatu</param>
    /// <param name="symbolGmi">Dwuznakowy symbol gminy</param>
    /// <param name="symbolRodz">Symbol rodzaju (RodzajJednostki, "0" oznacza wszystko)</param>
    public System.Threading.Tasks.Task<MiejscowoscPelna[]> PobierzListeMiejscowosciWGminieZSymbolemAsync(string Woj, string Pow, string Gmi, string Rodz)
    {
        return base.Channel.PobierzListeMiejscowosciWGminieZSymbolemAsync(Woj, Pow, Gmi, Rodz, DateTime.Now);
    }



    /// <summary>
    /// zwraca serię dwucyfrowych typów (12) takich jak wieś, kolonia, osada, część miasta, itp. - stan na dzień
    /// </summary>
    public System.Threading.Tasks.Task<RodzajMiejscowosci[]> PobierzSlownikRodzajowSIMCAsync(System.DateTime DataStanu)
    {
        return base.Channel.PobierzSlownikRodzajowSIMCAsync(DataStanu);
    }

    /// <summary>
    /// zwraca serię dwucyfrowych typów (12) takich jak wieś, kolonia, osada, część miasta, itp. - stan na dziś
    /// </summary>
    public System.Threading.Tasks.Task<RodzajMiejscowosci[]> PobierzSlownikRodzajowSIMCAsync()
    {
        return base.Channel.PobierzSlownikRodzajowSIMCAsync(DateTime.Now);
    }

    /// <summary>
    /// Zwraca krótkie zestawienie: ile elementów słownika, najkrótsze i najdłuższe nazwy, itp.
    /// </summary>
    public System.Threading.Tasks.Task<string> CiekawostkiSIMCAsync()
    {
        return base.Channel.CiekawostkiSIMCAsync();
    }


    /// <summary>
    /// zwraca listę stringów d/m/y - kolejne zmiany katalogu, a(0) to stan najstarszy
    /// </summary>
    public System.Threading.Tasks.Task<string[]> PobierzListeStanowSimcAsync()
    {
        return base.Channel.PobierzListeStanowSimcAsync();
    }

    /// <summary>
    /// zwraca listę dat - kolejne zmiany katalogu, a(0) to stan najstarszy
    /// </summary>
    public async System.Threading.Tasks.Task<DateTime[]> PobierzListeDatStanowSimcAsync()
    {
        var ret = await base.Channel.PobierzListeStanowSimcAsync();
        return KonwersjaStringArrToDateArr(ret);
    }


    public System.Threading.Tasks.Task<PlikKatalog> PobierzKatalogSIMCAdrAsync(System.DateTime DataStanu)
    {
        return base.Channel.PobierzKatalogSIMCAdrAsync(DataStanu);
    }

    public System.Threading.Tasks.Task<PlikKatalog> PobierzKatalogSIMCAsync(System.DateTime DataStanu)
    {
        return base.Channel.PobierzKatalogSIMCAsync(DataStanu);
    }

    public System.Threading.Tasks.Task<PlikKatalog> PobierzKatalogSIMCStatAsync(System.DateTime DataStanu)
    {
        return base.Channel.PobierzKatalogSIMCStatAsync(DataStanu);
    }

    public System.Threading.Tasks.Task<PlikKatalog> PobierzKatalogSIMCAdrAsync()
    {
        return base.Channel.PobierzKatalogSIMCAdrAsync(DateTime.Now);
    }

    public System.Threading.Tasks.Task<PlikKatalog> PobierzKatalogSIMCAsync()
    {
        return base.Channel.PobierzKatalogSIMCAsync(DateTime.Now);
    }

    public System.Threading.Tasks.Task<PlikKatalog> PobierzKatalogSIMCStatAsync()
    {
        return base.Channel.PobierzKatalogSIMCStatAsync(DateTime.Now);
    }


    public System.Threading.Tasks.Task<PlikZmiany> PobierzZmianySimcUrzedowyAsync(System.DateTime stanod, System.DateTime stando)
    {
        return base.Channel.PobierzZmianySimcUrzedowyAsync(stanod, stando);
    }

    public System.Threading.Tasks.Task<PlikZmiany> PobierzZmianySimcAdresowyAsync(System.DateTime stanod, System.DateTime stando)
    {
        return base.Channel.PobierzZmianySimcAdresowyAsync(stanod, stando);
    }

    public System.Threading.Tasks.Task<PlikZmiany> PobierzZmianySimcStatystycznyAsync(System.DateTime stanod, System.DateTime stando)
    {
        return base.Channel.PobierzZmianySimcStatystycznyAsync(stanod, stando);
    }


    #endregion


    #region ULIC

    /// <summary>
    /// Pobierz datę początkową bieżącego stanu katalogu ULIC - zapewne otrzymasz DZIŚ
    /// </summary>
    public System.Threading.Tasks.Task<System.DateTime> PobierzDateAktualnegoKatUlicAsync()
    {
        return base.Channel.PobierzDateAktualnegoKatUlicAsync();
    }

    /// <summary>
    /// Zwraca listę stringów zawierających pełną nazwę oraz skrót, np. "aleja, al.", "bulwar, bulw.", "droga, droga", "ogród, ogród", "ulica, ul."
    /// </summary>
    /// <returns></returns>
    public System.Threading.Tasks.Task<string[]> PobierzSlownikCechULICAsync()
    {
        return base.Channel.PobierzSlownikCechULICAsync();
    }


    /// <summary>
    /// Zwraca listę ulic w żądanej miejscowości na zadany czas (katalog zmieniany codziennie!)
    /// </summary>
    /// <param name="woj">Dwuznakowy symbol województwa (np. "12" dla małopolski)</param>
    /// <param name="pow">Dwuznakowy symbol powiatu</param>
    /// <param name="gmi">Dwuznakowy symbol gminy</param>
    /// <param name="rodzaj">Typ wyszukiwania</param>
    /// <param name="msc">Siedmioznakowy symbol miejscowości</param>
    /// <param name="DataStanu">minimalnie 1/1/2007</param>
    /// <exception cref="System.ArgumentNullException">gdy data jest NULL</exception>
    /// <exception cref="System.ArgumentException">gdy data sprzed 1/1/2007</exception>
    public System.Threading.Tasks.Task<UlicaDrzewo[]> PobierzListeUlicDlaMiejscowosciAsync(string woj, string pow, string gmi, string rodzaj, string msc, bool czyWersjaUrzedowa, bool czyWersjaAdresowa, System.DateTime DataStanu)
    {
        if (DataStanu == null) throw new System.ArgumentNullException("Data stanu musi być podana");
        if (DataStanu.Year < 2007) throw new System.ArgumentException("Rok musi być minimum 1999");

        return base.Channel.PobierzListeUlicDlaMiejscowosciAsync(woj, pow, gmi, rodzaj, msc, czyWersjaUrzedowa, czyWersjaAdresowa, DataStanu);
    }

    /// <summary>
    /// Zwraca listę ulic w żądanej miejscowości na zadany czas (katalog zmieniany codziennie!)
    /// </summary>
    /// <param name="woj">Dwuznakowy symbol województwa (np. "12" dla małopolski)</param>
    /// <param name="pow">Dwuznakowy symbol powiatu</param>
    /// <param name="gmi">Dwuznakowy symbol gminy</param>
    /// <param name="rodzaj">Typ wyszukiwania</param>
    /// <param name="msc">Siedmioznakowy symbol miejscowości</param>
    /// <param name="DataStanu">minimalnie 1/1/2007</param>
    /// <exception cref="System.ArgumentNullException">gdy data jest NULL</exception>
    /// <exception cref="System.ArgumentException">gdy data sprzed 1/1/2007</exception>
    public System.Threading.Tasks.Task<UlicaDrzewo[]> PobierzListeUlicDlaMiejscowosciAsync(string woj, string pow, string gmi, string rodzaj, string msc, bool czyWersjaUrzedowa, System.DateTime DataStanu)
    {
        if (DataStanu == null) throw new System.ArgumentNullException("Data stanu musi być podana");
        if (DataStanu.Year < 2007) throw new System.ArgumentException("Rok musi być minimum 1999");

        return base.Channel.PobierzListeUlicDlaMiejscowosciAsync(woj, pow, gmi, rodzaj, msc, czyWersjaUrzedowa, !czyWersjaUrzedowa, DataStanu);
    }

    /// <summary>
    /// Zwraca listę ulic w żądanej miejscowości stan na teraz
    /// </summary>
    /// <param name="woj">Dwuznakowy symbol województwa (np. "12" dla małopolski)</param>
    /// <param name="pow">Dwuznakowy symbol powiatu</param>
    /// <param name="gmi">Dwuznakowy symbol gminy</param>
    /// <param name="rodzaj">Typ wyszukiwania</param>
    /// <param name="msc">Siedmioznakowy symbol miejscowości</param>
    public System.Threading.Tasks.Task<UlicaDrzewo[]> PobierzListeUlicDlaMiejscowosciAsync(string woj, string pow, string gmi, string rodzaj, string msc, bool czyWersjaUrzedowa)
    {
        return base.Channel.PobierzListeUlicDlaMiejscowosciAsync(woj, pow, gmi, rodzaj, msc, czyWersjaUrzedowa, !czyWersjaUrzedowa, DateTime.Now);
    }


    /// <summary>
    /// Zwraca krótkie zestawienie: ile elementów słownika, najkrótsze i najdłuższe nazwy, itp.
    /// </summary>
    public System.Threading.Tasks.Task<string> CiekawostkiULICAsync()
    {
        return base.Channel.CiekawostkiULICAsync();
    }


    /// <summary>
    /// zwraca listę stringów d/m/y - kolejne zmiany katalogu, a(0) to stan najstarszy
    /// </summary>
    public System.Threading.Tasks.Task<string[]> PobierzListeStanowUlicAsync()
    {
        return base.Channel.PobierzListeStanowUlicAsync();
    }

    /// <summary>
    /// zwraca listę dat - kolejne zmiany katalogu, a(0) to stan najstarszy
    /// </summary>
    public async System.Threading.Tasks.Task<DateTime[]> PobierzListeDatStanowUlicAsync()
    {
        var ret = await base.Channel.PobierzListeStanowUlicAsync();
        return KonwersjaStringArrToDateArr(ret);
    }

    public System.Threading.Tasks.Task<PlikKatalog> PobierzKatalogULICAsync(System.DateTime DataStanu)
    {
        return base.Channel.PobierzKatalogULICAsync(DataStanu);
    }

    public System.Threading.Tasks.Task<PlikKatalog> PobierzKatalogULICAdrAsync(System.DateTime DataStanu)
    {
        return base.Channel.PobierzKatalogULICAdrAsync(DataStanu);
    }

    public System.Threading.Tasks.Task<PlikKatalog> PobierzKatalogULICBezDzielnicAsync(System.DateTime DataStanu)
    {
        return base.Channel.PobierzKatalogULICBezDzielnicAsync(DataStanu);
    }

    public System.Threading.Tasks.Task<PlikKatalog> PobierzStaryKatalogULICAsync(System.DateTime DataStanu)
    {
        return base.Channel.PobierzStaryKatalogULICAsync(DataStanu);
    }

    public System.Threading.Tasks.Task<PlikKatalog> PobierzKatalogULICAsync()
    {
        return base.Channel.PobierzKatalogULICAsync(DateTime.Now);
    }

    public System.Threading.Tasks.Task<PlikKatalog> PobierzKatalogULICAdrAsync()
    {
        return base.Channel.PobierzKatalogULICAdrAsync(DateTime.Now);
    }

    public System.Threading.Tasks.Task<PlikKatalog> PobierzKatalogULICBezDzielnicAsync()
    {
        return base.Channel.PobierzKatalogULICBezDzielnicAsync(DateTime.Now);
    }

    public System.Threading.Tasks.Task<PlikKatalog> PobierzStaryKatalogULICAsync()
    {
        return base.Channel.PobierzStaryKatalogULICAsync(DateTime.Now);
    }

    public System.Threading.Tasks.Task<PlikZmiany> PobierzZmianyUlicUrzedowyAsync(System.DateTime stanod, System.DateTime stando)
    {
        return base.Channel.PobierzZmianyUlicUrzedowyAsync(stanod, stando);
    }

    public System.Threading.Tasks.Task<PlikZmiany> PobierzZmianyUlicAdresowyAsync(System.DateTime stanod, System.DateTime stando)
    {
        return base.Channel.PobierzZmianyUlicAdresowyAsync(stanod, stando);
    }

    public System.Threading.Tasks.Task<PlikZmiany> PobierzZmianyUlicBezDzielnicAsync(System.DateTime stanod, System.DateTime stando)
    {
        return base.Channel.PobierzZmianyUlicBezDzielnicAsync(stanod, stando);
    }

    #endregion


    /// <summary>
    /// Wpisane na stałe jako RodzajJednostki ENUM
    /// </summary>
    public System.Threading.Tasks.Task<string[]> PobierzSlownikRodzajowJednostekAsync()
    {
        return base.Channel.PobierzSlownikRodzajowJednostekAsync();
    }


    public System.Threading.Tasks.Task<PlikKatalog> PobierzKatalogWMRODZAsync(System.DateTime DataStanu)
    {
        return base.Channel.PobierzKatalogWMRODZAsync(DataStanu);
    }


    public System.Threading.Tasks.Task<GeoTeryt> PobierzGeoTerytPlikPelnyAsync(string rok, string kwartal, string kodTerytorialny)
    {
        return base.Channel.PobierzGeoTerytPlikPelnyAsync(rok, kwartal, kodTerytorialny);
    }

    public System.Threading.Tasks.Task<GeoTeryt> PobierzGeoTerytPlikRoznicowyAsync(string rok, string kwartal, string kodTerytorialny)
    {
        return base.Channel.PobierzGeoTerytPlikRoznicowyAsync(rok, kwartal, kodTerytorialny);
    }


    /// <summary>
    /// zamień siedmioznakowy kod miejscowości na pełne dane o niej
    /// </summary>
    /// <param name="symbolMsc"></param>
    /// <returns></returns>
    public System.Threading.Tasks.Task<ZweryfikowanyAdresBezUlic[]> WeryfikujAdresDlaMiejscowosciAsync(string symbolMsc)
    {
        return base.Channel.WeryfikujAdresDlaMiejscowosciAsync(symbolMsc);
    }

    public System.Threading.Tasks.Task<ZweryfikowanyAdresBezUlic[]> WeryfikujAdresDlaMiejscowosciAdresowyAsync(string symbolMsc)
    {
        return base.Channel.WeryfikujAdresDlaMiejscowosciAdresowyAsync(symbolMsc);
    }

    public System.Threading.Tasks.Task<ZweryfikowanyAdres[]> WeryfikujAdresDlaUlicAsync(string symbolMsc, string SymUl)
    {
        return base.Channel.WeryfikujAdresDlaUlicAsync(symbolMsc, SymUl);
    }

    public System.Threading.Tasks.Task<ZweryfikowanyAdres[]> WeryfikujAdresDlaUlicAdresowyAsync(string symbolMsc, string SymUl)
    {
        return base.Channel.WeryfikujAdresDlaUlicAdresowyAsync(symbolMsc, SymUl);
    }

    public System.Threading.Tasks.Task<ZweryfikowanyAdresBezUlic[]> WeryfikujAdresWmiejscowosciAsync(string Wojewodztwo, string Powiat, string Gmina, string Miejscowosc, string Rodzaj)
    {
        return base.Channel.WeryfikujAdresWmiejscowosciAsync(Wojewodztwo, Powiat, Gmina, Miejscowosc, Rodzaj);
    }

    public System.Threading.Tasks.Task<ZweryfikowanyAdresBezUlic[]> WeryfikujAdresWmiejscowosciAdresowyAsync(string Wojewodztwo, string Powiat, string Gmina, string Miejscowosc, string Rodzaj)
    {
        return base.Channel.WeryfikujAdresWmiejscowosciAdresowyAsync(Wojewodztwo, Powiat, Gmina, Miejscowosc, Rodzaj);
    }

    public System.Threading.Tasks.Task<ZweryfikowanyAdres[]> WeryfikujNazwaAdresUlicAsync(string Wojewodztwo, string Powiat, string Gmina, string Miejscowosc, string Rodzaj, string NazwaUlicy)
    {
        return base.Channel.WeryfikujNazwaAdresUlicAsync(Wojewodztwo, Powiat, Gmina, Miejscowosc, Rodzaj, NazwaUlicy);
    }

    public System.Threading.Tasks.Task<ZweryfikowanyAdres[]> WeryfikujNazwaAdresUlicAdresowyAsync(string nazwaWoj, string nazwaPow, string nazwaGmi, string nazwaMiejscowosc, string rodzajMiejsc, string nazwaUlicy)
    {
        return base.Channel.WeryfikujNazwaAdresUlicAdresowyAsync(nazwaWoj, nazwaPow, nazwaGmi, nazwaMiejscowosc, rodzajMiejsc, nazwaUlicy);
    }

    /// <summary>
    /// wyszukaj wg nazwy (prefiks) - poda zarówno gminę, powiat, delegaturę... (wszystkie poziomy)
    /// </summary>
    /// <param name="nazwa">prefiks nazwy</param>
    /// <returns></returns>
    public System.Threading.Tasks.Task<JednostkaPodzialuTerytorialnego[]> WyszukajJPTAsync(string nazwa)
    {
        return base.Channel.WyszukajJPTAsync(nazwa);
    }

    public System.Threading.Tasks.Task<Miejscowosc[]> WyszukajMiejscowoscAsync(string nazwaMiejscowosci, string identyfikatorMiejscowosci)
    {
        return base.Channel.WyszukajMiejscowoscAsync(nazwaMiejscowosci, identyfikatorMiejscowosci);
    }

    /// <summary>
    /// Wyszukiwanie miejscowości według zadanych kryteriów
    /// </summary>
    /// <param name="nazwaWoj">prefiks nazwy województwa (może być Empty)</param>
    /// <param name="nazwaPow">prefiks nazwy powiatu (może być Empty)</param>
    /// <param name="nazwaGmi">prefiks nazwy gminy (może być Empty)</param>
    /// <param name="nazwaMiejscowosci">prefiks nazwy miejscowości (może być Empty)</param>
    /// <param name="identyfikatorMiejscowosci">(może być Empty)</param>
    /// <returns></returns>
    public System.Threading.Tasks.Task<Miejscowosc[]> WyszukajMiejscowoscWJPTAsync(string nazwaWoj, string nazwaPow, string nazwaGmi, string nazwaMiejscowosci, string identyfikatorMiejscowosci)
    {
        return base.Channel.WyszukajMiejscowoscWJPTAsync(nazwaWoj, nazwaPow, nazwaGmi, nazwaMiejscowosci, identyfikatorMiejscowosci);
    }

    public System.Threading.Tasks.Task<Ulica[]> WyszukajUliceAsync(string nazwaulicy, string cecha, string nazwamiejscowosci)
    {
        return base.Channel.WyszukajUliceAsync(nazwaulicy, cecha, nazwamiejscowosci);
    }

    public System.Threading.Tasks.Task<JednostkaPodzialuTerytorialnego[]> WyszukajJednostkeWRejestrzeAsync(string nazwa, identyfikatory[] identyfiks, string kategoria, System.DateTime DataStanu)
    {
        return base.Channel.WyszukajJednostkeWRejestrzeAsync(nazwa, identyfiks, kategoria, DataStanu);
    }

    public System.Threading.Tasks.Task<JednostkaPodzialuTerytorialnego[]> WyszukajJednostkeWRejestrzeWebLSAsync(string nazwa, identyfikatory[] identyfiks, string kategoria, bool zawezenieRekordow, int odKtoregoRekordu, int iloscRekordow, System.DateTime DataStanu)
    {
        return base.Channel.WyszukajJednostkeWRejestrzeWebLSAsync(nazwa, identyfiks, kategoria, zawezenieRekordow, odKtoregoRekordu, iloscRekordow, DataStanu);
    }

    public System.Threading.Tasks.Task<int> WyszukajJednostkeWRejestrzeWebLSCountAsync(string nazwa, identyfikatory[] identyfiks, string kategoria, System.DateTime DataStanu)
    {
        return base.Channel.WyszukajJednostkeWRejestrzeWebLSCountAsync(nazwa, identyfiks, kategoria, DataStanu);
    }

    public System.Threading.Tasks.Task<JednostkaPodzialuTerytorialnegoDoSortowania[]> WyszukajJednostkeWRejestrzeWebLSZSortowaniemAsync(string nazwa, identyfikatory[] identyfiks, string kategoria, bool zawezenieRekordow, int odKtoregoRekordu, int iloscRekordow, System.DateTime DataStanu)
    {
        return base.Channel.WyszukajJednostkeWRejestrzeWebLSZSortowaniemAsync(nazwa, identyfiks, kategoria, zawezenieRekordow, odKtoregoRekordu, iloscRekordow, DataStanu);
    }

    public System.Threading.Tasks.Task<WyszukanaMiejscowosc[]> WyszukajMiejscowoscWRejestrzeAsync(string nazwa, string rodzajMiejscowosci, string symbol, identyfikatory[] identyfiks, System.DateTime DataStanu)
    {
        return base.Channel.WyszukajMiejscowoscWRejestrzeAsync(nazwa, rodzajMiejscowosci, symbol, identyfiks, DataStanu);
    }

    public System.Threading.Tasks.Task<WyszukanaUlica[]> WyszukajUliceWRejestrzeAsync(string nazwa, string cecha, string identyfikator, identyfikatory[] identyfiks, System.DateTime DataStanu)
    {
        return base.Channel.WyszukajUliceWRejestrzeAsync(nazwa, cecha, identyfikator, identyfiks, DataStanu);
    }

    public System.Threading.Tasks.Task<WyszukanaMiejscowosc[]> WyszukajMiejscowoscWebAsync(string nazwa, string rodzajMiejscowosci, string symbol, identyfikatory[] identyfiks, bool czyPelnaNazwa, int iloscRekordow, System.DateTime DataStanu)
    {
        return base.Channel.WyszukajMiejscowoscWebAsync(nazwa, rodzajMiejscowosci, symbol, identyfiks, czyPelnaNazwa, iloscRekordow, DataStanu);
    }

    public System.Threading.Tasks.Task<WyszukanaMiejscowoscZPodstawowa[]> WyszukajMiejscowoscWebLSAsync(string nazwa, string rodzajMiejscowosci, string symbol, identyfikatory[] idents, bool czyPelnaNazwa, bool czyFragmentNazwy, bool zawezenieRekordow, int odKtoregoRekordu, int iloscRekordow, System.DateTime DataStanu)
    {
        return base.Channel.WyszukajMiejscowoscWebLSAsync(nazwa, rodzajMiejscowosci, symbol, idents, czyPelnaNazwa, czyFragmentNazwy, zawezenieRekordow, odKtoregoRekordu, iloscRekordow, DataStanu);
    }

    public System.Threading.Tasks.Task<int> WyszukajMiejscowoscWebCountAsync(string nazwa, string rodzajMiejscowosci, string symbol, identyfikatory[] identyfiks, bool czyPelnaNazwa, System.DateTime DataStanu)
    {
        return base.Channel.WyszukajMiejscowoscWebCountAsync(nazwa, rodzajMiejscowosci, symbol, identyfiks, czyPelnaNazwa, DataStanu);
    }

    public System.Threading.Tasks.Task<int> WyszukajMiejscowoscWebCountLSAsync(string nazwa, string rodzajMiejscowosci, string symbol, identyfikatory[] identyfiks, bool czyPelnaNazwa, bool czyFragmentNazwy, System.DateTime DataStanu)
    {
        return base.Channel.WyszukajMiejscowoscWebCountLSAsync(nazwa, rodzajMiejscowosci, symbol, identyfiks, czyPelnaNazwa, czyFragmentNazwy, DataStanu);
    }

    public System.Threading.Tasks.Task<WyszukanaUlica[]> WyszukajUliceWebAsync(string nazwa, string cecha, string identyfikator, identyfikatory[] identyfiks, bool czyPelnaNazwa, int iloscRekordow, System.DateTime DataStanu)
    {
        return base.Channel.WyszukajUliceWebAsync(nazwa, cecha, identyfikator, identyfiks, czyPelnaNazwa, iloscRekordow, DataStanu);
    }

    public System.Threading.Tasks.Task<int> WyszukajUliceWebCountAsync(string nazwa, string cecha, string identyfikator, identyfikatory[] identyfiks, bool czyPelnaNazwa, System.DateTime DataStanu)
    {
        return base.Channel.WyszukajUliceWebCountAsync(nazwa, cecha, identyfikator, identyfiks, czyPelnaNazwa, DataStanu);
    }

    public System.Threading.Tasks.Task<WyszukanaUlicaZPodstawowa[]> WyszukajUliceWebLSAsync(string nazwa, string cecha, string identyfikator, identyfikatory[] identyfiks, bool czyPelnaNazwa, bool czyFragmentNazwy, bool zawezenieRekordow, int odKtoregoRekordu, int iloscRekordow, System.DateTime DataStanu)
    {
        return base.Channel.WyszukajUliceWebLSAsync(nazwa, cecha, identyfikator, identyfiks, czyPelnaNazwa, czyFragmentNazwy, zawezenieRekordow, odKtoregoRekordu, iloscRekordow, DataStanu);
    }

    public System.Threading.Tasks.Task<int> WyszukajUliceWebLSCountAsync(string nazwa, string cecha, string identyfikator, identyfikatory[] identyfiks, bool czyPelnaNazwa, bool czyFragmentNazwy, System.DateTime DataStanu)
    {
        return base.Channel.WyszukajUliceWebLSCountAsync(nazwa, cecha, identyfikator, identyfiks, czyPelnaNazwa, czyFragmentNazwy, DataStanu);
    }

    /// <summary>
    /// statystyczne zestawienie liczby gmin, powiatów itp. per województwo
    /// </summary>
    public System.Threading.Tasks.Task<Licznosc> LicznoscJednostekAsync()
    {
        return base.Channel.LicznoscJednostekAsync();
    }

    public System.Threading.Tasks.Task<ObiektyZZ[]> ObiektyZZAsync(string woj, string pow, string gmi, string rodz, string symbolMsc, string SymUl)
    {
        return base.Channel.ObiektyZZAsync(woj, pow, gmi, rodz, symbolMsc, SymUl);
    }

    public System.Threading.Tasks.Task<AdresoBudynki[]> AdresBudynkowAsync(string woj, string pow, string gmi, string rodz, string symbolMsc, string SymUl)
    {
        return base.Channel.AdresBudynkowAsync(woj, pow, gmi, rodz, symbolMsc, SymUl);
    }

    public System.Threading.Tasks.Task<AdresoBudynkiMieszkania[]> AdresBudynkowMieszkaniaAsync(string woj, string pow, string gmi, string rodz, string symbolMsc, string SymUl)
    {
        return base.Channel.AdresBudynkowMieszkaniaAsync(woj, pow, gmi, rodz, symbolMsc, SymUl);
    }

    public System.Threading.Tasks.Task<PlikZbioryNOBC> ZbiorObiektowZZAsync(string woj, string pow, string gmi, string rodz, string formatDanych, System.DateTime DataStanu)
    {
        return base.Channel.ZbiorObiektowZZAsync(woj, pow, gmi, rodz, formatDanych, DataStanu);
    }

    public System.Threading.Tasks.Task<PlikZbioryNOBC> AdresyBudynkowZIdentyfikatoremAdresuAsync(string woj, string pow, string gmi, string rodz, string formatDanych, System.DateTime DataStanu)
    {
        return base.Channel.AdresyBudynkowZIdentyfikatoremAdresuAsync(woj, pow, gmi, rodz, formatDanych, DataStanu);
    }

    public System.Threading.Tasks.Task<PlikZbioryNOBC> AdresyBudynkowZIdentyfikatoremBudynkuAsync(string woj, string pow, string gmi, string rodz, string formatDanych, System.DateTime DataStanu)
    {
        return base.Channel.AdresyBudynkowZIdentyfikatoremBudynkuAsync(woj, pow, gmi, rodz, formatDanych, DataStanu);
    }

    public System.Threading.Tasks.Task<PlikZbioryNOBC> AdresyBudynkowAsync(string woj, string pow, string gmi, string rodz, string formatDanych, System.DateTime DataStanu)
    {
        return base.Channel.AdresyBudynkowAsync(woj, pow, gmi, rodz, formatDanych, DataStanu);
    }

    public System.Threading.Tasks.Task<PlikZbioryNOBC> AdresyBudynkowZLiczbaMieszkanAsync(string woj, string pow, string gmi, string rodz, string formatDanych, System.DateTime DataStanu)
    {
        return base.Channel.AdresyBudynkowZLiczbaMieszkanAsync(woj, pow, gmi, rodz, formatDanych, DataStanu);
    }

    public System.Threading.Tasks.Task<PlikZbioryNOBC> AdresyBudynkowImieszkaniaAsync(string woj, string pow, string gmi, string rodz, string formatDanych, System.DateTime DataStanu)
    {
        return base.Channel.AdresyBudynkowImieszkaniaAsync(woj, pow, gmi, rodz, formatDanych, DataStanu);
    }

    public virtual System.Threading.Tasks.Task OpenAsync()
    {
        return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
    }






    #region autogenerated


    private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
    {
        //if ((endpointConfiguration == EndpointConfiguration.custom))
        {
            System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
            System.ServiceModel.Channels.TransportSecurityBindingElement userNameOverTransportSecurityBindingElement = System.ServiceModel.Channels.SecurityBindingElement.CreateUserNameOverTransportBindingElement();
            userNameOverTransportSecurityBindingElement.MessageSecurityVersion = System.ServiceModel.MessageSecurityVersion.WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10;
            result.Elements.Add(userNameOverTransportSecurityBindingElement);
            System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
            textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap11, System.ServiceModel.Channels.AddressingVersion.WSAddressing10);
            result.Elements.Add(textBindingElement);
            System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
            httpsBindingElement.AllowCookies = true;
            httpsBindingElement.MaxBufferSize = int.MaxValue;
            httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
            result.Elements.Add(httpsBindingElement);
            return result;
        }
        //throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
    }

    private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
    {
        if ((endpointConfiguration == EndpointConfiguration.test))
            return new System.ServiceModel.EndpointAddress("https://uslugaterytws1test.stat.gov.pl/terytws1.svc");

        return new System.ServiceModel.EndpointAddress("https://uslugaterytws1.stat.gov.pl/TerytWs1.svc");
    }

    public static System.ServiceModel.Channels.Binding GetDefaultBinding()
    {
        return TERYT.GetBindingForEndpoint(EndpointConfiguration.custom);
    }

    private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
    {
        return TERYT.GetEndpointAddress(EndpointConfiguration.custom);
    }

    public enum EndpointConfiguration
    {
        test,
        custom,
        production
    }

    #endregion

}
